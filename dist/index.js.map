{"version":3,"sources":["../src/index.js"],"names":["require","config","LocalStrategy","Strategy","GoogleTokenStrategy","FacebookTokenStrategy","app","server","createServer","io","use","json","limit","bodyLimit","initialize","Account","usernameField","passwordField","authenticate","clientID","googleClientID","clientSecret","googleClientSecret","callbackURL","accessToken","refreshToken","profile","done","findOne","googleId","id","err","user","username","email","firstname","name","givenname","lastname","familyname","save","res","status","message","facebookClientID","facebookClientSecret","facebookId","console","log","givenName","emails","value","familyName","serializeUser","deserializeUser","get","req","typingUsers","on","client","description","newChannel","channel","emit","userName","channelId","messageBody","senderId","receipientId","profilePicUrl","newMessage","msg","userId","userAvatar","userAvatarColor","timeStamp","listen","port","address","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["require('dotenv').config;\nimport http from 'http';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport socket from 'socket.io';\nimport PrivateMessage from './model/privatemessage';\nimport ChannelMessage from './model/channelmessage';\nimport Channel from './model/channel';\nimport UserDataExt from './controller/extensions/userData-ext';\nimport User from './model/user';\n//import FacebookTokenStrategy from 'passport-token-facebook';\nimport { generateAccessToken, respond, authenticate } from './middleware/authMiddleware'\n\nconst LocalStrategy  = require('passport-local').Strategy;\nvar GoogleTokenStrategy =  require('passport-google-oauth20').Strategy;\nvar FacebookTokenStrategy =  require('passport-facebook-token');\n\n\nimport config from './config';\nimport routes from './routes';\n\nlet app = express();\napp.server = http.createServer(app);\nlet io = socket(app.server);\n\n//middleware\n//parse application/json\napp.use(bodyParser.json({\n  limit: config.bodyLimit\n}));\n\n//local passport config\napp.use(passport.initialize());\nlet Account = require('./model/account');\npassport.use(new LocalStrategy({\n  usernameField: 'email',\n  passwordField: 'password'\n},\n  Account.authenticate()\n));\n\n//GoogleTokenStrategy\npassport.use(new GoogleTokenStrategy({\n  clientID: config.googleClientID,\n  clientSecret: config.googleClientSecret,\n  callbackURL: \"http://localhost:4010/auth/google/callback\"\n}, (accessToken, refreshToken, profile, done) => {\n  User.findOne({googleId: profile.id}, (err, user) => {\n    if (err) {\n      //res.status(500).json({message: `An error has occured: ${err.message}`});\n      return done(err, false);\n    }\n    else if (!err && user !== null) {\n      return done(false, user);\n    }\n    else {\n      user = new User({username: profile.email});\n      user.googleId = profile.id;\n      user.firstname = profile.name.givenname;\n      user.lastname = profile.name.familyname;\n      user.email = profile.email;\n\n      user.save(err => {\n        if (err) {\n          res.status(500).json({message: `An error has occured: ${err.message}`});\n          return done(err, false);\n        } else {\n          res.status(200).json({message: `New user added from facebook successfully`});\n          return done(null, user);\n        }\n      })\n    }\n  });\n}\n));\n\n//FacebookTokenStrategy\npassport.use(new FacebookTokenStrategy({\n  clientID: config.facebookClientID,\n  clientSecret: config.facebookClientSecret\n}, (accessToken, refreshToken, profile, done) => {\n  User.findOne({facebookId: profile.id}, (err, user) => {\n      if (err) {\n        res.status(409).json({ message: `An error occured: ${err.message}`});\n        return done(err, false);\n      }\n      else if (!err && user !== null) {\n        return done(null, user);\n      }\n      else {\n        user = new User();\n        console.log(`Profile id ${profile.id}`);\n        console.log(`Profile name ${profile.name.givenName}`);\n        console.log(`Profile email ${profile.emails[0].value}`);\n        user.facebookId = profile.id;\n        user.firstname = profile.name.givenName;\n        user.lastname = profile.name.familyName;\n        user.email = profile.emails[0].value;\n        user.save(err => {\n          if (err) {\n            console.log(`Error`);\n              //res.status(500).json({message: `An error has occured: ${err.message}`});\n              return done(err, false);\n          }\n            console.log(`Success`);\n            generateAccessToken, respond;\n            return done(null, user);\n        })\n\n      }\n  });\n}\n));\n\n\npassport.serializeUser(Account.serializeUser());\npassport.deserializeUser(Account.deserializeUser());\n\n\n\n//api routes v1\napp.use('/v1', routes);\n\n// Base URL test endpoint to see if API is running\napp.get('/', (req, res) => {\n  res.json({ message: 'BadaGig API is ALIVE!' })\n});\n\n/*||||||||||||||||SOCKET|||||||||||||||||||||||*/\n//Listen for connection\nvar typingUsers = {};\n\nio.on('connection', function(client) {\n  console.log('a user connected');\n  //Listens for a new chat message\n  client.on('newChannel', function(name, description) {\n    //Create channel\n    let newChannel = new Channel({\n    name: name,\n    description: description,\n  });\n    //Save it to database\n    newChannel.save(function(err, channel){\n      //Send message to those connected in the room\n      console.log('new channel created');\n      io.emit(\"channelCreated\", channel.name, channel.description, channel.id);\n    });\n  });\n\n  //Listens for user typing.\n  client.on(\"startType\", function(userName, channelId){\n    console.log(\"User \" + userName + \" is writing a message...\");\n    typingUsers[userName] = channelId;\n    io.emit(\"userTypingUpdate\", typingUsers, channelId);\n  });\n\n  client.on(\"stopType\", function(userName){\n    console.log(\"User \" + userName + \" has stopped writing a message...\");\n    delete typingUsers[userName];\n    io.emit(\"userTypingUpdate\", typingUsers);\n  });\n\n  //listens for a new private chat message\n  client.on('newPrivateMessage', function(messageBody, userName, senderId, receipientId, profilePicUrl) {\n    // Create message\n\n    console.log(messageBody);\n\n    let newMessage = new PrivateMessage({\n      messageBody: messageBody,\n      senderId: senderId,\n      userName: userName,\n      receipientId: receipientId,\n      profilePicUrl: profilePicUrl\n    });\n      //Save it to database\n      newMessage.save(function(err, msg) {\n        if (err) {\n          console.log(err);\n        }\n          console.log('new message sent');\n          io.emit(\"PrivateMessageCreated\", msg.messageBody, msg.userName, msg.senderId, msg.receipientId, msg.profilePicUrl)\n      });\n  });\n\n  //Listens for a new channel chat message\n  client.on('newChannelMessage', function(messageBody, userName, senderId, receipientId, profilePicUrl) {\n    //Create message\n\n    console.log(messageBody);\n\n    let newMessage = new ChannelMessage({\n    messageBody: messageBody,\n    userId: userId,\n    channelId: channelId,\n    userName: userName,\n    userAvatar: userAvatar,\n    userAvatarColor: userAvatarColor\n  });\n    //Save it to database\n    newMessage.save(function(err, msg){\n      //Send message to those connected in the room\n      console.log('new message sent');\n\n      io.emit(\"channelMessageCreated\",  msg.messageBody, msg.userId, msg.userName, msg.channelId, msg.userName, msg.userAvatar, msg.userAvatarColor, msg.id, msg.timeStamp);\n    });\n  });\n});\n/*||||||||||||||||||||END SOCKETS||||||||||||||||||*/\n\napp.server.listen(config.port);\nconsole.log(`Started on port ${app.server.address().port}`);\n\nmodule.exports = {\n  app,\n  io\n}\n"]}