{"version":3,"sources":["../../src/controller/account.js"],"names":["TOKENTIME","SECRET","nodeMailer","require","config","db","api","post","req","res","findUserByEmail","body","email","err","userData","status","json","message","register","username","password","account","authenticate","session","send","params","user","isactivated","save","next","scope","console","log","token","sign","expiresIn","id","_id","get","logout","waterfall","done","randomBytes","buf","toString","tokenExpiration","Date","now","passwordResetToken","smptTransport","createTransport","service","auth","XOAuth2","clienId","clientSecret","refreshToken","mailOptions","to","from","subject","text","sendMail","close","User","findOne","$gt","setPassword","undefined","error","success","pass"],"mappings":"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","file":"account.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport config from '../config';\nimport Account from '../model/account';\nimport UserDataExt from './extensions/userData-ext';\nimport async from 'async';\nimport crypto from 'crypto';\nimport jwt from 'jsonwebtoken';\nimport expressJwt from 'express-jwt';\n\nimport { generateAccessToken, respond, authenticate } from '../middleware/authMiddleware';\n\nconst TOKENTIME = 60*60*24*90;\nconst SECRET = \"BadaGig SERVER SIDE\";\n\nvar  nodeMailer = require('nodemailer');\n\nexport default ({ config, db }) => {\n  let api = Router();\n\n  // '/v1/account/register'\n  api.post('/register', (req, res) => {\n    UserDataExt.findUserByEmail(req.body.email, (err, userData) => {\n      if (err) {\n        res.status(409).json({ message: `An error occured: ${err.message}`});\n        return;\n      } else if (userData) {\n        res.status(300).json({ message: `Email ${req.body.email} is already registered`});\n      }\n      // else {\n        Account.register(new Account({username: req.body.email}), req.body.password, function(err, account) {\n          if(err) {\n            res.status(500).json({ message: err });\n            return;\n          }\n          passport.authenticate('local', { session: false })(req, res, () => {\n              res.status(200).send('Successfully created new account');\n          });\n        });\n      // }\n    });\n  });\n  //'/v1/account/activateaccount/:email' This is to activate a newly created account via email\n  api.post('/activateaccount/:email', (req, res) => {\n    UserDataExt.findUserByEmail(req.params.email, (err, user) => {\n      if (err) {\n        res.status(500).json({message: `An error has occured, please try again. ${err.message}`});\n      } else if (!user) {\n        res.status(404).json({message: \"The specified email is not registered with us. Please proceed to create an account\"});\n      }\n        user.isactivated = true;\n        user.save(err => {\n          if (err) {\n              res.status(500).json({message: `An error has occured, please try again. ${err.message}`});\n          }\n            res.status(200).json(`You account have been successfully activiated. You can proceed to login`);\n        })\n    })\n  })\n\n  // '/v1/account/login'\n  api.post('/login', (req, res, next) => {\n\t\tUserDataExt.findUserByEmail(req.body.email, (err, userData) => {\n      if (err) {\n        res.status(409).json({ message: `An error occured: ${err.message}`});\n        return;\n      } else {\n\t\t\t\tnext();\n\t\t\t}\n    });\n\t}, passport.authenticate('local', { session: false, scope: [] }), (err, req, res, next) => {\n\t\tif (err) {\n\t\t\tres.status(401).json({ message: `Password is incorrect`});\n      return;\n\t\t}\n\t}, generateAccessToken, respond);\n\n  // '/v1/account/facebook/token'\n  api.post('/auth/facebook/token', passport.authenticate('facebook-token', {session: false}), (req, res, next) => {\n      if (req.user) {\n        console.log(`User req ${req.user}`);\n\n\n        req.token = req.token || {};\n        req.token = jwt.sign ({\n        }, SECRET, {\n          expiresIn: TOKENTIME // 90 days\n        });\n\n\n        res.status(200).json({\n          user: req.user.email,\n          token: req.token,\n          id: req.user._id\n        });\n        //res.status(200).json({message: `New user added from facebook successfully`});\n         //var token = authenticate.getToken({_id: req.user._id});\n      }\n  });\n\n  //'/v1/account/google/token'\n  api.post('/google/token', passport.authenticate('google', {scope: ['profile']}), (req, res) => {\n    if (req.user) {\n      console.log('Google token route');\n      generateAccessToken, respond;\n    }\n  })\n\n  // '/v1/account/logout'\n  api.get('/logout', authenticate, (req, res) => {\n    res.logout();\n    res.status(200).send('Successfully logged out');\n  });\n\n  api.get('/me', authenticate, (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  ///v1/account/forgot Generate token, token expiration and send email to user for instruction\n  api.post('/forgot', (req, res, next) => {\n    console.log('Trying to post');\n    async.waterfall([\n      (done) => {\n        crypto.randomBytes(4, (err, buf) => {\n          if (err) {\n            res.status(500).json({message: `An error occured: ${err.message}`});\n            return;\n          }\n            var token = buf.toString('hex');\n            done(err, token);\n        });\n      },\n        (token, done) => {\n          UserDataExt.findUserByEmail(req.body.email, (err, user) => {\n            console.log('Searching for user');\n            if (err) {\n              res.status(500).json({message: `An error occured: ${err.message}`});\n              return;\n            } else if (!user) {\n              res.status(404).json({message: `No user account found`});\n              return;\n            }\n            console.log('Assign token to user profile in mongodb');\n              user.tokenExpiration = Date.now() + 3600000 ;// one hour\n              user.passwordResetToken = token;\n            console.log('Saving token db');\n              user.save(err => {\n                if (err) {\n                  res.status(500).json({message: err});\n                  return;\n                }\n                done(err, user, token);\n              });\n          });\n        },\n\n      (err, user, token) => {\n        console.log('Tyring to login');\n        var smptTransport = nodeMailer.createTransport({\n          service: 'Gmail',\n          auth: {\n              XOAuth2: {\n                user: 'perfect.aduh@gmail.com',\n                clienId: '322793033087-q13jmff94tnv4gtqejqjio982kuoctfd.apps.googleusercontent.com',\n                clientSecret: 'YaSj9Bk2Og4nZlMlH8Twu_UB',\n                refreshToken: '1/iITHN8FnaWEZeMfPVrHxPojZ4AtCG22YLflgBxWm2W0'\n              }\n            }\n        });\n        var mailOptions = {\n          to: user.email,\n          from: 'noreply@badagig.ng',\n          subject: 'BadaGig Platform Password Reset Request',\n          text: 'Hello!' + '\\n' +\n            'You recently requested to reset your password for the BadaGig platform.' + '\\n' +\n            'Here is your reset code below.' + '\\n\\n' +\n                      token + '\\n\\n' +\n            'Copy the code above and use it to reset your password.' + '\\n\\n' +\n            'This code will only be valid for the next hour.' + '\\n' +\n            'If you did not request a password reset then please ignore this email.' + '\\n' +\n            'Thanks,' + '\\n' +\n            'Team BadaGig'\n        };\n          smptTransport.sendMail(mailOptions, (err) => {\n            console.log('Now sending mail');\n            if (err) {\n              console.log('Sendingmail failed');\n              res.status(500).json({message: `An error occured: ${err.message}`})\n              return;\n            }\n              //res.status(200).json({message: 'Password reset process has been iniated, please check your email'})\n              console.log('mail sent');\n              smptTransport.close();\n          });\n        }\n    ])\n  });\n\n  // /v1/account/reset/:token\n  api.get('/reset/:token', (req, res) => {\n    User.findOne({passwordResetToken: req.params.token, tokenExpiration: {$gt: Date.now()}}, (err, user) =>{\n      if (err) {\n        res.status(500).json({message: `An error occured: ${err.message}`});\n        return;\n      } else if (!user) {\n        res.status(404).json({message: 'Password reset token is invalid or has expired.' });\n        return;\n      }\n        res.status(200).json({message: 'Token found and valid'});\n    });\n  });\n\n  api.post('/reset/:token', (req, res) => {\n    async.waterfall([\n      (done) => {\n        User.findOne({passwordResetToken: req.params.token, tokenExpiration: {$gt: Date.now()}}, (err, user) =>{\n          if (err) {\n            res.status(500).json({message: `An error occured: ${err.message}`});\n            return;\n          } else if (!user) {\n            res.status(404).json({message: 'Password reset token is invalid or has expired.' });\n            return;\n          }\n          user.setPassword(req.body.password, (err) => {\n            user.passwordResetToken = undefined;\n            user.tokenExpiration = undefined;\n\n            user.save(err => {\n              if (err) {\n                res.status(500).json({error: 'Password reset failed, please try again'});\n                return;\n              }\n              res.status(200).json({success: 'Password has been reset successfully'});\n            });\n          });\n      });\n    },\n    (user, done) => {\n      var smptTransport = nodeMailer.createTransport({\n        service: 'Gmail',\n        auth: {\n          user: 'perfect.aduh@gmail.com',\n          pass: 'mmmmmmm'\n        }\n      });\n      var mailOptions = {\n        to: user.email,\n        from: `noreply@badagig.ng`,\n        subject: `BadaGig Platform Password Reset Request`,\n        text: `Hello!` + '\\n' +\n          'This is a confirmation that the password for your account user.email has been successfully updated' + '\\n' +\n          'Thanks,' + '\\n' +\n          'Team BadaGig'\n      };\n        smptTransport.sendMail(mailOptions, (err) => {\n          if (err) {\n            res.status(500).json({error: `An error occured: ${err.message}`})\n            return;\n          }\n            res.status(200).json({message: 'Password confirmation mail has been sent successfully'});\n          console.log('mail sent');\n        });\n      }\n    ])\n  });\n  return api;\n}\n"]}